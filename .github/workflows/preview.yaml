name: Vercel Preview Deployment
on: [ push, pull_request ]
jobs:
  vercel:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Cache Dependencies
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Setup Node 14
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Deploy to Staging
        id: deploy-vercel-staging
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_TL_ENGINE }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

      # - name: Run Tests Against Vercel
      #   env:
      #     VERCEL_URL: ${{ steps.deploy-vercel-staging.outputs.preview-url }}
      #   run: npm run test

      - name: Deploy to Production
        uses: amondnet/vercel-action@v20
        id: deploy-vercel-production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_TL_ENGINE }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Add comment to PR
          id: loading_lighthouse_comment_to_pr
          uses: marocchino/sticky-pull-request-comment@v2
          with:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              number: ${{ github.event.pull_request.number }}
              header: lighthouse
              message: |
                  üö¶ Running Lighthouse audit...

    - name: Add comment to PR
        id: loading_budget_comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            number: ${{ github.event.pull_request.number }}
            header: budget
            message: |
                ‚è± Running budget checks...

     - name: Audit URLs using Lighthouse
              id: lighthouse_audit
              uses: treosh/lighthouse-ci-action@v7
              with:
                  # add as many urls here as you wish to audit
                  # prefixed by the preview-url
                  urls: |
                      ${{ steps.deploy-vercel-staging.outputs.preview-url }}
                  budgetPath: '.github/lighthouse/budget.json'
                  uploadArtifacts: true
                  temporaryPublicStorage: true
                  runs: 3
            - name: Format lighthouse result
              id: lighthouse_result
              if: ${{ always() }}
              uses: actions/github-script@v4
              with:
                  github-token: ${{secrets.GITHUB_TOKEN}}
                  script: |
                      const links = ${{ steps.lighthouse_audit.outputs.links }}
                      const results = (${{ steps.lighthouse_audit.outputs.manifest }}).filter(result => result.isRepresentativeRun);

                      const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥';

                      const comment = results.map((result) => {
                        const summary = result.summary;
                        const url = result.url;

                        return `
                        üåé [${url}](${url})
                        ‚ö°Ô∏è [Lighthouse report](${links[url]})

                        | Category | Score |
                        | --- | --- |
                        ${Object.keys(summary).map((key) => {
                          const percentage = Math.round(summary[key] * 100);
                          return `| ${score(percentage)} ${key} | ${percentage} |`;
                        }).join('\n')}

                        `;
                      }).join('---');

                      core.setOutput("comment", comment);
            - name: Format budget result
              id: budget_result
              if: ${{ always() }}
              uses: actions/github-script@v4
              with:
                  github-token: ${{secrets.GITHUB_TOKEN}}
                  script: |
                      const assertions = ${{ steps.lighthouse_audit.outputs.assertionResults }};
                      if (!assertions.length) {
                        core.setOutput("comment", '‚úÖ Budget met, nothing to see here');
                      } else {
                        const comment = assertions.map((result) => {
                          return `
                      ‚ùå **${result.auditProperty || ''}.${result.auditId}** failure on [${result.url}](${result.url})

                      *${result.auditTitle}* - [docs](${result.auditDocumentationLink})

                      | Actual | Expected |
                      | --- | --- |
                      | ${result.actual} | ${result.operator} ${result.expected} |
                      `;
                        }).join('---');

                        core.setOutput("comment", comment);
                      }
            - name: Add Lighthouse comment to PR
              id: lighthouse_comment_to_pr
              if: ${{ always() }}
              uses: marocchino/sticky-pull-request-comment@v1
              with:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  number: ${{ github.event.pull_request.number }}
                  header: lighthouse
                  message: |
                      ${{ steps.lighthouse_result.outputs.comment }}
            - name: Add Budget comment to PR
              id: budget_comment_to_pr
              if: ${{ always() }}
              uses: marocchino/sticky-pull-request-comment@v1
              with:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  number: ${{ github.event.pull_request.number }}
                  header: budget
                  message: |
                      ${{ steps.budget_result.outputs.comment }}